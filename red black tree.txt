https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/
Lecture 10: Red-black Trees, Rotations, Insertions, Deletions
MIT  Introduction to Algorithms (SMA 5503)

Example of BST

AVL trees
2-3 trees
2-3-4 trees
B-trees

red-black trees
skip lists
treaps

red black properties
1. each node is either red or black
2. the root and leaves are all black
3. every red node has black node, no two red nodes in consequence
4. all simple paths from a node x to a descendant leave of x have same number of black nodes on them.
black_height(x)
does not include x itself.



at most half of the nodes is red


height of red black tree

red-black tree with n keys has height h<=2log(n+1)
so O(logn)


Proof:
Merge each red node into its black parent
2-3-4 tree
all the leaves have the same depth

every internal node has 2-4 children
every leaf has same black depth namely black-height(root)

# of leaves in this tree, # of nodes + 1
in a 2-3-4 tree, the # of leaves is between 2^h to 4^h ( calculating the # of nodes)
the original tree can have height at most 2h
original tree height h<= 2 log(n+1)

Queries 
(search, min, max, successor, predessor) are O(lgn) in a red-black tree

updates
insert and delete

-BST opertaion
-color changes
-restructuring of links via rotations

Rotation:
(same as AVL rotation?)
right rotate and left rotate, if two nodes are involved, we lable the top one
the revese notation opertaion is left(a) / right(b)

rotation takes O(1) time


RB-Insert(x):
Idea 
- TreeInsert(x)
- color it red
- problem if the partent is red
- Move the violation up the tree via recoloring, until we can fix the violation via rotation & recoloring



log(n) time
RB-Insert(T,x):
    Tree-Insert(T,x)
    color[x] red
    while x not root and color is red
        if p(x) is the left child of p(p(x))
            look at another child of p(p(x)) y
            if y is red  #  case 1
                we recolor, push down the blackness to the two child
                continuing on p(p(x))
            else if y is black
                if x is the right child of p(x)  # case 2
                    leftRotation(p(x))  # this will turn our tree to case 3
                # case 3 run anyway
                color p(x) black
                color p(p(x)) red
                rightRotation(p(p(x))

                
        else #case b
            same as before, but reverse the notation of left and right
     color the root black
     
     
Read deletion in the book and post here.
                
            

